import { Document } from "@shared/schema";

export const defaultDocuments: Document[] = [
  {
    id: 1,
    title: "Hardware Components",
    content: "# Hardware Components\n\n## Server Specifications\n\nThe homelab is built around the following key hardware components:\n\n### Primary Server\n- **CPU**: AMD Ryzen 9 5900X (12 cores, 24 threads)\n- **Motherboard**: ASUS ROG Strix X570-E Gaming\n- **RAM**: 64GB (4x16GB) Corsair Vengeance RGB Pro DDR4-3600\n- **Storage**:\n  - 2x Samsung 980 Pro 1TB NVMe SSD (OS and VM storage)\n  - 4x WD Red Plus 4TB in RAID10 (NAS storage)\n- **Case**: Fractal Design Define 7 XL\n- **Power Supply**: Corsair RM850x 850W 80+ Gold\n- **Network**: 10Gbe SFP+ Intel X520-DA2\n\n### Network Equipment\n- **Router**: pfSense on Protectli Vault (4 core, 8GB RAM)\n- **Switch**: Ubiquiti UniFi 24 PoE Pro\n- **Access Points**: 2x Ubiquiti UniFi 6 Lite\n\n## System Performance\n\nThe current configuration provides excellent performance for virtualization tasks with sufficient headroom for expansion. The multiple storage tiers allow for flexibility in deploying different workloads based on performance requirements.",
    category: "Server Setup",
    icon: "server",
    slug: "hardware-components"
  },
  {
    id: 2,
    title: "Proxmox Installation",
    content: "# Proxmox Installation\n\nStep-by-step guide for installing Proxmox virtualization environment...",
    category: "Server Setup",
    icon: "server",
    slug: "proxmox-installation"
  },
  {
    id: 3,
    title: "Network Configuration",
    content: "# Network Configuration\n\nComprehensive documentation for setting up the network infrastructure...",
    category: "Server Setup",
    icon: "server",
    slug: "network-configuration"
  },
  {
    id: 4,
    title: "pfSense Configuration",
    content: "# pfSense Configuration Guide\n\n## Introduction\n\nThis guide covers the installation and configuration of pfSense, a powerful open-source firewall and router based on FreeBSD. pfSense serves as the network gateway and security boundary for the homelab environment.\n\n## Hardware Requirements\n\n- **CPU:** 64-bit dual-core processor (Intel or AMD)\n- **RAM:** 2GB minimum (4GB+ recommended)\n- **Storage:** 16GB minimum (SSD recommended)\n- **Network:** Minimum 2 network interfaces (WAN and LAN)\n\n## Installation\n\n### 1. Download pfSense\n\nDownload the latest stable version of pfSense from the [official website](https://www.pfsense.org/download/).\n\n### 2. Create Bootable USB\n\nUse tools like Rufus (Windows) or dd (Linux/Mac) to create a bootable USB drive.\n\n```bash\n# Linux/Mac example\ndd if=pfSense-CE-2.6.0-RELEASE-amd64.iso of=/dev/sdX bs=4M\n```\n\n### 3. Initial Setup\n\n1. Boot from the USB drive\n2. Select \"Install pfSense\"\n3. Follow the on-screen instructions for installation\n4. Assign network interfaces (identify which is WAN and which is LAN)\n5. Complete installation and reboot\n\n## Initial Configuration\n\n### 1. Access the Web Interface\n\n- Connect to the LAN port\n- Navigate to https://192.168.1.1 in your browser\n- Log in with default credentials:\n  - Username: admin\n  - Password: pfsense\n\n### 2. Run the Setup Wizard\n\n1. Set hostname and domain\n2. Configure time server settings\n3. Configure WAN interface (settings provided by your ISP)\n4. Configure LAN interface (default is usually fine)\n5. Set admin password\n\n## Advanced Configurations\n\n### Setting Up VLANs\n\n1. Navigate to Interfaces > VLANs\n2. Click \"Add\"\n3. Select parent interface (usually LAN)\n4. Enter VLAN tag (e.g., 10 for IoT devices)\n5. Add description\n6. Save\n\n### Creating Additional Interfaces\n\n1. Navigate to Interfaces > Assignments\n2. Select VLAN from dropdown\n3. Click \"Add\"\n4. Configure the new interface with appropriate IP range\n\n### Configure Firewall Rules\n\n#### WAN Rules\n\n1. Navigate to Firewall > Rules > WAN\n2. Default: Block all incoming traffic\n3. Add rules for specific services to be accessible from WAN\n\n#### LAN Rules\n\n1. Navigate to Firewall > Rules > LAN\n2. Default: Allow all outgoing traffic\n3. Add rules to restrict access between VLANs\n\n### Setting Up DNS Resolver\n\n1. Navigate to Services > DNS Resolver\n2. Enable DNS Resolver\n3. Check \"Enable DNSSEC Support\"\n4. Add custom DNS forwarding for specific domains\n\n## Security Recommendations\n\n### 1. Enable Suricata IDS/IPS\n\n1. Navigate to System > Package Manager\n2. Install the Suricata package\n3. Configure under Services > Suricata\n\n### 2. Set Up pfBlockerNG\n\n1. Install pfBlockerNG package\n2. Configure IP and DNS blocking lists\n3. Enable GeoIP blocking for suspicious countries\n\n### 3. Regular Updates\n\n1. Navigate to System > Update\n2. Check for updates regularly\n3. Apply updates during maintenance windows\n\n## Monitoring and Maintenance\n\n### Dashboard Widgets\n\n1. Navigate to Status > Dashboard\n2. Add widgets for:\n   - System Information\n   - Interface Statistics\n   - Traffic Graphs\n   - Firewall Logs\n\n### Backup Configuration\n\n1. Navigate to Diagnostics > Backup & Restore\n2. Create regular backups\n3. Store backups offsite\n\n## Troubleshooting\n\n### Common Issues\n\n1. **No Internet Connectivity**\n   - Check WAN interface status\n   - Verify DNS settings\n   - Check firewall rules\n\n2. **Performance Issues**\n   - Check hardware utilization\n   - Disable unnecessary services\n   - Consider hardware upgrade if needed\n\n3. **VPN Connectivity Problems**\n   - Verify certificates\n   - Check firewall rules\n   - Review VPN client configuration",
    category: "Security",
    icon: "shield-alt",
    slug: "pfsense-configuration"
  },
  {
    id: 5,
    title: "VPN Setup",
    content: "# VPN Setup\n\nStep-by-step guide for setting up a secure VPN connection...",
    category: "Security",
    icon: "shield-alt",
    slug: "vpn-setup"
  },
  {
    id: 6,
    title: "Intrusion Detection",
    content: "# Intrusion Detection\n\nImplementation guide for setting up intrusion detection systems...",
    category: "Security",
    icon: "shield-alt",
    slug: "intrusion-detection"
  },
  {
    id: 7,
    title: "Docker Installation",
    content: "# Docker Installation\n\n## Prerequisites\n\n- A Linux-based system (this guide uses Ubuntu 22.04 LTS)\n- Root or sudo access\n- Internet connectivity\n\n## Installation Steps\n\n### 1. Update System Packages\n\n```bash\nsudo apt update\nsudo apt upgrade -y\n```\n\n### 2. Install Required Dependencies\n\n```bash\nsudo apt install -y apt-transport-https ca-certificates curl software-properties-common gnupg\n```\n\n### 3. Add Docker's Official GPG Key\n\n```bash\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n```\n\n### 4. Add Docker Repository\n\n```bash\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n```\n\n### 5. Install Docker Engine\n\n```bash\nsudo apt update\nsudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin\n```\n\n### 6. Verify Installation\n\n```bash\nsudo docker run hello-world\n```\n\n### 7. Enable Non-Root User Access (Optional but Recommended)\n\n```bash\nsudo usermod -aG docker $USER\nnewgrp docker\n```\n\n## Basic Docker Commands\n\n### Pull an Image\n```bash\ndocker pull nginx:latest\n```\n\n### Run a Container\n```bash\ndocker run -d -p 80:80 --name my-nginx nginx:latest\n```\n\n### List Running Containers\n```bash\ndocker ps\n```\n\n### Stop a Container\n```bash\ndocker stop my-nginx\n```\n\n### Remove a Container\n```bash\ndocker rm my-nginx\n```\n\n## Docker Compose\n\nDocker Compose allows you to define and run multi-container Docker applications.\n\n### Create docker-compose.yml\n\n```yaml\nversion: '3'\nservices:\n  web:\n    image: nginx:latest\n    ports:\n      - \"80:80\"\n  db:\n    image: mysql:8.0\n    environment:\n      MYSQL_ROOT_PASSWORD: example\n      MYSQL_DATABASE: mydb\n    volumes:\n      - db_data:/var/lib/mysql\n\nvolumes:\n  db_data:\n```\n\n### Run with Docker Compose\n\n```bash\ndocker-compose up -d\n```\n\n## Maintenance\n\n### Update Docker\n```bash\nsudo apt update\nsudo apt upgrade docker-ce docker-ce-cli containerd.io docker-compose-plugin\n```\n\n### Clean Up Unused Resources\n```bash\ndocker system prune -a\n```",
    category: "Docker Containers",
    icon: "layer-group",
    slug: "docker-installation"
  },
  {
    id: 8,
    title: "Container Orchestration",
    content: "# Container Orchestration\n\nAdvanced guide for orchestrating containers in a homelab environment...",
    category: "Docker Containers",
    icon: "layer-group",
    slug: "container-orchestration"
  },
  {
    id: 9,
    title: "Compose Files",
    content: "# Docker Compose Files\n\nReference documentation for Docker Compose configuration files...",
    category: "Docker Containers",
    icon: "layer-group",
    slug: "compose-files"
  },
  {
    id: 10,
    title: "Prometheus Setup",
    content: "# Prometheus Setup\n\n## Introduction\n\nPrometheus is an open-source systems monitoring and alerting toolkit that collects and stores metrics as time series data. This guide covers the installation and configuration of Prometheus in a Docker environment, which is ideal for homelab monitoring.\n\n## Prerequisites\n\n- Docker and Docker Compose installed\n- Basic understanding of YAML configuration\n- A server or VM with at least 2GB RAM and 10GB storage\n\n## Installation\n\n### 1. Create Directory Structure\n\n```bash\nmkdir -p ~/prometheus/config\nmkdir -p ~/prometheus/data\ncd ~/prometheus\n```\n\n### 2. Create Prometheus Configuration\n\nCreate a file named `prometheus.yml` in the config directory with the following content:\n\n```yaml\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nalerting:\n  alertmanagers:\n    - static_configs:\n        - targets:\n          # - alertmanager:9093\n\nrule_files:\n  # - \"first_rules.yml\"\n\nscrape_configs:\n  - job_name: \"prometheus\"\n    static_configs:\n      - targets: [\"localhost:9090\"]\n\n  - job_name: \"node_exporter\"\n    static_configs:\n      - targets: [\"node-exporter:9100\"]\n\n  - job_name: \"cadvisor\"\n    static_configs:\n      - targets: [\"cadvisor:8080\"]\n```\n\n### 3. Create Docker Compose File\n\nCreate a `docker-compose.yml` file in the prometheus directory:\n\n```yaml\nversion: '3.8'\n\nservices:\n  prometheus:\n    image: prom/prometheus:latest\n    container_name: prometheus\n    restart: unless-stopped\n    volumes:\n      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml\n      - ./data:/prometheus\n    command:\n      - '--config.file=/etc/prometheus/prometheus.yml'\n      - '--storage.tsdb.path=/prometheus'\n      - '--web.console.libraries=/etc/prometheus/console_libraries'\n      - '--web.console.templates=/etc/prometheus/consoles'\n      - '--web.enable-lifecycle'\n    ports:\n      - \"9090:9090\"\n    networks:\n      - monitoring\n\n  node-exporter:\n    image: prom/node-exporter:latest\n    container_name: node-exporter\n    restart: unless-stopped\n    volumes:\n      - /proc:/host/proc:ro\n      - /sys:/host/sys:ro\n      - /:/rootfs:ro\n    command:\n      - '--path.procfs=/host/proc'\n      - '--path.rootfs=/rootfs'\n      - '--path.sysfs=/host/sys'\n      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'\n    ports:\n      - \"9100:9100\"\n    networks:\n      - monitoring\n\n  cadvisor:\n    image: gcr.io/cadvisor/cadvisor:latest\n    container_name: cadvisor\n    restart: unless-stopped\n    volumes:\n      - /:/rootfs:ro\n      - /var/run:/var/run:ro\n      - /sys:/sys:ro\n      - /var/lib/docker/:/var/lib/docker:ro\n      - /dev/disk/:/dev/disk:ro\n    ports:\n      - \"8080:8080\"\n    networks:\n      - monitoring\n\nnetworks:\n  monitoring:\n    driver: bridge\n```\n\n### 4. Deploy with Docker Compose\n\n```bash\ndocker-compose up -d\n```\n\n## Accessing Prometheus\n\nAfter deployment, you can access the Prometheus web interface at:\n\n```\nhttp://your-server-ip:9090\n```\n\n## Adding More Exporters\n\n### MySQL Exporter\n\nAdd to your `docker-compose.yml`:\n\n```yaml\n  mysql-exporter:\n    image: prom/mysqld-exporter:latest\n    container_name: mysql-exporter\n    restart: unless-stopped\n    environment:\n      - DATA_SOURCE_NAME=exporter:password@(mysql:3306)/\n    ports:\n      - \"9104:9104\"\n    networks:\n      - monitoring\n```\n\nAnd update your `prometheus.yml` to include:\n\n```yaml\n  - job_name: \"mysql\"\n    static_configs:\n      - targets: [\"mysql-exporter:9104\"]\n```\n\n### Blackbox Exporter (for endpoint monitoring)\n\nAdd to your `docker-compose.yml`:\n\n```yaml\n  blackbox-exporter:\n    image: prom/blackbox-exporter:latest\n    container_name: blackbox-exporter\n    restart: unless-stopped\n    ports:\n      - \"9115:9115\"\n    networks:\n      - monitoring\n```\n\nAnd update your `prometheus.yml` to include:\n\n```yaml\n  - job_name: 'blackbox'\n    metrics_path: /probe\n    params:\n      module: [http_2xx]  # Looking for a HTTP 200 response\n    static_configs:\n      - targets:\n        - https://example.com   # Target to probe\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: blackbox-exporter:9115  # The blackbox exporter's real hostname:port\n```\n\n## Creating Recording Rules\n\nRecording rules allow you to precompute frequently needed or computationally expensive expressions.\n\nCreate a file named `recording_rules.yml` in the config directory:\n\n```yaml\ngroups:\n  - name: example\n    rules:\n      - record: job:node_memory_Mem_bytes:sum\n        expr: sum(node_memory_MemTotal_bytes) by (job)\n```\n\nUpdate your `prometheus.yml` to include:\n\n```yaml\nrule_files:\n  - \"recording_rules.yml\"\n```\n\n## Setting Up Alerting Rules\n\nCreate a file named `alert_rules.yml` in the config directory:\n\n```yaml\ngroups:\n- name: example\n  rules:\n  - alert: HighCpuLoad\n    expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode=\"idle\"}[5m])) * 100) > 80\n    for: 5m\n    labels:\n      severity: warning\n    annotations:\n      summary: High CPU load (instance {{ $labels.instance }})\n      description: \"CPU load is > 80%\\n  VALUE = {{ $value }}\\n  LABELS = {{ $labels }}\"\n```\n\nUpdate your `prometheus.yml` to include:\n\n```yaml\nrule_files:\n  - \"recording_rules.yml\"\n  - \"alert_rules.yml\"\n```\n\n## Maintenance\n\n### Data Retention\n\nBy default, Prometheus keeps data for 15 days. To change this, modify the command section in your `docker-compose.yml`:\n\n```yaml\ncommand:\n  - '--config.file=/etc/prometheus/prometheus.yml'\n  - '--storage.tsdb.path=/prometheus'\n  - '--storage.tsdb.retention.time=30d'  # Keep data for 30 days\n```\n\n### Hot Configuration Reload\n\nTo reload Prometheus configuration without restarting:\n\n```bash\ncurl -X POST http://localhost:9090/-/reload\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Prometheus Can't Scrape Targets**\n   - Check network connectivity between containers\n   - Verify target is properly exposed and accessible\n   - Inspect scrape configurations for errors\n\n2. **High Memory Usage**\n   - Reduce retention period\n   - Decrease scrape frequency for less important targets\n   - Consider scaling up your server resources\n\n## Next Steps\n\nAfter setting up Prometheus, you can:\n\n1. Connect it to Grafana for better visualization\n2. Set up AlertManager for notifications\n3. Add more exporters for specialized monitoring (Redis, SNMP, etc.)",
    category: "Monitoring",
    icon: "tachometer-alt",
    slug: "prometheus-setup"
  },
  {
    id: 11,
    title: "Grafana Dashboards",
    content: "# Grafana Dashboards\n\n## Introduction\n\nGrafana is an open-source platform for monitoring and observability that allows you to query, visualize, and alert on metrics regardless of where they're stored. This guide covers how to set up Grafana with Prometheus and create effective dashboards for homelab monitoring.\n\n## Prerequisites\n\n- Prometheus up and running (see Prometheus Setup guide)\n- Docker and Docker Compose installed\n- Basic understanding of metrics and visualization concepts\n\n## Installation\n\n### 1. Create Directory Structure\n\n```bash\nmkdir -p ~/grafana/config\nmkdir -p ~/grafana/data\ncd ~/grafana\n```\n\n### 2. Create Docker Compose File\n\nCreate a `docker-compose.yml` file with the following content:\n\n```yaml\nversion: '3.8'\n\nservices:\n  grafana:\n    image: grafana/grafana:latest\n    container_name: grafana\n    restart: unless-stopped\n    volumes:\n      - ./data:/var/lib/grafana\n      - ./config:/etc/grafana/provisioning\n    environment:\n      - GF_SECURITY_ADMIN_USER=admin\n      - GF_SECURITY_ADMIN_PASSWORD=secure_password  # Change this!\n      - GF_USERS_ALLOW_SIGN_UP=false\n      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-piechart-panel,grafana-worldmap-panel\n    ports:\n      - \"3000:3000\"\n    networks:\n      - monitoring\n\nnetworks:\n  monitoring:\n    external: true  # This assumes Prometheus network already exists\n```\n\n### 3. Deploy with Docker Compose\n\n```bash\ndocker-compose up -d\n```\n\n## Initial Configuration\n\n### 1. Access Grafana\n\nAccess Grafana at `http://your-server-ip:3000` and log in with:\n- Username: admin\n- Password: secure_password (or whatever you specified in the docker-compose file)\n\n### 2. Add Prometheus Data Source\n\n1. Go to Configuration > Data Sources\n2. Click \"Add data source\"\n3. Select \"Prometheus\"\n4. Set the URL to `http://prometheus:9090` (using Docker network DNS)\n5. Click \"Save & Test\"\n\n## Creating Basic Dashboards\n\n### System Monitoring Dashboard\n\n1. Create a new dashboard (+ icon > Dashboard)\n2. Add a new panel\n3. For CPU Usage:\n   - Query: `100 - (avg by (instance) (irate(node_cpu_seconds_total{mode=\"idle\"}[5m])) * 100)`\n   - Legend: `CPU Usage`\n   - Panel Type: Graph or Gauge\n4. Add another panel for Memory Usage:\n   - Query: `(1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100`\n   - Legend: `Memory Usage %`\n5. Add Disk Usage panel:\n   - Query: `(1 - node_filesystem_free_bytes{mountpoint=\"/\"} / node_filesystem_size_bytes{mountpoint=\"/\"}) * 100`\n   - Legend: `Disk Usage %`\n6. Add Network Traffic panel:\n   - Query: `rate(node_network_receive_bytes_total{device!=\"lo\"}[5m])*8`\n   - Legend: `Network Receive {{device}}`\n   - Second query: `rate(node_network_transmit_bytes_total{device!=\"lo\"}[5m])*8`\n   - Legend: `Network Transmit {{device}}`\n\n### Docker Containers Dashboard\n\n1. Create a new dashboard\n2. Add a panel for Container CPU Usage:\n   - Query: `sum by (name) (rate(container_cpu_usage_seconds_total{image!=\"\"}[1m]))`\n   - Legend: `CPU Usage: {{name}}`\n3. Add Memory Usage panel:\n   - Query: `container_memory_usage_bytes{image!=\"\"}`\n   - Legend: `Memory: {{name}}`\n4. Add Disk I/O panel:\n   - Query: `rate(container_fs_reads_bytes_total{image!=\"\"}[1m])`\n   - Legend: `Disk Reads: {{name}}`\n   - Second query: `rate(container_fs_writes_bytes_total{image!=\"\"}[1m])`\n   - Legend: `Disk Writes: {{name}}`\n\n## Advanced Dashboard Configurations\n\n### Dashboard Variables\n\nVariables make dashboards more interactive and reusable:\n\n1. Click the gear icon (Dashboard settings)\n2. Select \"Variables\"\n3. Click \"New\"\n4. Create a host variable:\n   - Name: `host`\n   - Type: Query\n   - Data source: Prometheus\n   - Query: `label_values(node_uname_info, instance)`\n   - Preview of values will show available hosts\n5. Use the variable in queries: `node_memory_MemTotal_bytes{instance=\"$host\"}`\n\n### Setting Up Alerts\n\n1. Edit a panel\n2. Go to \"Alert\" tab\n3. Configure alert conditions:\n   - Condition: `avg() OF query(A, 5m, now) IS ABOVE 90`\n   - (For example, alerting when CPU usage > 90%)\n4. Set evaluation interval (how often to check)\n5. Configure notifications (requires alert channels to be set up)\n\n### Importing Community Dashboards\n\nGrafana has a rich library of pre-made dashboards:\n\n1. Go to \"+ Import\" in the Dashboards menu\n2. Enter dashboard ID or JSON file\n   - Node Exporter Dashboard: 1860\n   - Docker Monitoring: 893\n   - Prometheus Stats: 2\n3. Configure data source\n4. Click Import\n\n## Dashboard Organization\n\n### Creating Folders\n\n1. Hover over Dashboards in the sidebar\n2. Click \"Manage\"\n3. Click \"New Folder\"\n4. Organize dashboards into logical groups:\n   - Infrastructure Monitoring\n   - Docker Containers\n   - Applications\n   - Network\n\n### Using Annotations\n\nAnnotations mark important events on time-series graphs:\n\n1. Go to Dashboard Settings > Annotations\n2. Click \"New\"\n3. Create a Prometheus annotation query:\n   - Name: \"Restarts\"\n   - Data source: Prometheus\n   - Query: `resets(process_uptime_seconds[1m]) > 0`\n\n## Customization and Theming\n\n### Dashboard Variables\n\n1. General settings for consistent appearance:\n   - Go to Dashboard Settings > General\n   - Set time picker range\n   - Set auto-refresh interval\n\n### Setting Up Custom Themes\n\n1. Go to Configuration > Preferences\n2. Choose light or dark theme\n3. For custom branding:\n   - Edit `custom.ini` in Grafana config volume\n   - Set logo and appearance options\n\n## Best Practices\n\n1. **Use Consistent Naming**: Follow a convention for dashboard and panel titles\n2. **Organize Dashboards Logically**: Group related metrics on the same dashboard\n3. **Add Documentation**: Include descriptions for dashboards and panels\n4. **Use Variables**: Make dashboards flexible with template variables\n5. **Set Appropriate Time Ranges**: Default to meaningful time ranges for your data\n6. **Keep It Simple**: Focus on actionable metrics; avoid dashboard clutter\n7. **Use Appropriate Visualization**: Choose the right panel type for each metric\n\n## Troubleshooting\n\n### Common Issues\n\n1. **No Data in Panels**\n   - Verify Prometheus data source configuration\n   - Check that metrics exist in Prometheus\n   - Validate PromQL syntax\n\n2. **Performance Issues**\n   - Reduce time range for complex queries\n   - Use recording rules in Prometheus for expensive queries\n   - Limit number of panels per dashboard\n\n3. **Authentication Problems**\n   - Reset admin password using CLI if needed\n   - Check configuration for external auth providers",
    category: "Monitoring",
    icon: "tachometer-alt",
    slug: "grafana-dashboards"
  },
  {
    id: 12,
    title: "Alert Configuration",
    content: "# Alert Configuration\n\nSetting up alerting rules and notifications for system monitoring...",
    category: "Monitoring",
    icon: "tachometer-alt",
    slug: "alert-configuration"
  },
  {
    id: 13,
    title: "Pi-hole Setup",
    content: "# Pi-hole Setup Guide\n\n## Introduction\n\nPi-hole is a network-wide ad blocking and DNS service that can significantly improve your network's performance, privacy, and security. This guide covers the installation and configuration of Pi-hole in a Docker environment for homelab use.\n\n## Overview\n\nPi-hole works by acting as a DNS server for your network, blocking requests to known advertising, tracking, and malicious domains. Key benefits include:\n\n- Blocking ads and trackers across your entire network\n- Improved browsing speed and reduced bandwidth usage\n- Enhanced privacy by blocking tracking domains\n- Detailed statistics on network traffic and blocked domains\n- Local DNS management capabilities\n\n## Prerequisites\n\n- A Linux system with Docker installed\n- Static IP address for your Pi-hole instance\n- Basic understanding of DNS and network configurations\n- Access to router configuration (for setting Pi-hole as your network's DNS server)\n\n## Installation\n\n### Using Docker\n\n1. Create a directory for Pi-hole configuration:\n\n```bash\nmkdir -p ~/pihole/etc-pihole\nmkdir -p ~/pihole/etc-dnsmasq.d\ncd ~/pihole\n```\n\n2. Create a Docker Compose file (`docker-compose.yml`):\n\n```yaml\nversion: '3'\n\nservices:\n  pihole:\n    container_name: pihole\n    image: pihole/pihole:latest\n    ports:\n      - \"53:53/tcp\"\n      - \"53:53/udp\"\n      - \"80:80/tcp\"\n    environment:\n      TZ: 'America/New_York'  # Change to your timezone\n      WEBPASSWORD: 'secure_password_change_me'  # Change this!\n      ServerIP: '192.168.1.42'  # Your Pi-hole IP address\n      DNS1: '1.1.1.1'  # Primary upstream DNS\n      DNS2: '1.0.0.1'  # Secondary upstream DNS\n    volumes:\n      - './etc-pihole:/etc/pihole'\n      - './etc-dnsmasq.d:/etc/dnsmasq.d'\n    restart: unless-stopped\n    cap_add:\n      - NET_ADMIN  # Required for DHCP functionality\n    networks:\n      pihole_network:\n        ipv4_address: 192.168.1.42  # Static IP for Pi-hole container\n\nnetworks:\n  pihole_network:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: 192.168.1.0/24\n          gateway: 192.168.1.1\n```\n\n3. Start the Pi-hole container:\n\n```bash\ndocker-compose up -d\n```\n\n### Using Official Installer (Alternative Method)\n\nIf you prefer to run Pi-hole directly on the host:\n\n```bash\ncurl -sSL https://install.pi-hole.net | bash\n```\n\nThis will guide you through an interactive setup process.\n\n## Initial Configuration\n\n### Accessing the Admin Interface\n\n1. Navigate to `http://your-pihole-ip/admin` in your web browser\n2. Log in with the password set in your Docker Compose file or during installation\n\n### Basic Settings\n\n1. **DNS Settings**:\n   - Go to Settings > DNS\n   - Choose upstream DNS providers\n   - Enable DNSSEC for enhanced security\n\n2. **DHCP Configuration** (Optional):\n   - Go to Settings > DHCP\n   - Enable DHCP server if you want Pi-hole to handle IP assignments\n   - Set your IP range, gateway, and lease time\n\n3. **Blocklists**:\n   - Go to Group Management > Adlists\n   - Add additional blocklists from trusted sources like:\n     - https://firebog.net/\n     - https://github.com/StevenBlack/hosts\n\n## Network Configuration\n\n### Setting Pi-hole as Network DNS\n\n**Option 1: Router Configuration**\n\n1. Access your router's admin page\n2. Find DNS settings (usually under WAN, Internet, or DHCP settings)\n3. Set your primary DNS to your Pi-hole's IP address\n4. Save settings and reboot router if needed\n\n**Option 2: DHCP Options**\n\n1. In your router's DHCP settings, find \"DHCP Options\" or similar\n2. Set Option 6 (DNS Server) to your Pi-hole's IP address\n\n**Option 3: Individual Device Configuration**\n\nFor testing or specific devices, manually configure the DNS settings on individual devices to point to your Pi-hole's IP address.\n\n## Advanced Configuration\n\n### Using Pi-hole as a DHCP Server\n\n1. **Disable router DHCP**:\n   - Access your router's admin page\n   - Find DHCP settings and disable the DHCP server\n\n2. **Enable Pi-hole DHCP**:\n   - Go to Settings > DHCP in Pi-hole admin interface\n   - Enable DHCP server\n   - Configure IP range, gateway, and lease time\n   - Click Save\n\n### Local DNS Records\n\n1. Go to Local DNS > DNS Records\n2. Add custom DNS entries for your internal services\n3. Format: `hostname.local` pointing to the IP address of the server\n\n### Using Unbound with Pi-hole\n\nFor enhanced privacy, you can set up Unbound as a recursive DNS resolver:\n\n1. Install Unbound:\n\n```bash\napt update && apt install -y unbound\n```\n\n2. Configure Unbound by creating `/etc/unbound/unbound.conf.d/pi-hole.conf`:\n\n```\nserver:\n    # If no logfile is specified, syslog is used\n    verbosity: 0\n\n    port: 5335\n    do-ip4: yes\n    do-udp: yes\n    do-tcp: yes\n\n    # May be set to yes if you have IPv6 connectivity\n    do-ip6: no\n\n    # Use this only when you downloaded the list of primary root servers!\n    root-hints: \"/var/lib/unbound/root.hints\"\n\n    # Trust glue only if it is within the server's authority\n    harden-glue: yes\n\n    # Require DNSSEC data for trust-anchored zones, if such data is absent, the zone becomes BOGUS\n    harden-dnssec-stripped: yes\n\n    # Don't use Capitalization randomization as it known to cause DNSSEC issues sometimes\n    use-caps-for-id: no\n\n    # Reduce EDNS reassembly buffer size.\n    edns-buffer-size: 1472\n\n    # Perform prefetching of close to expired message cache entries\n    prefetch: yes\n\n    # One thread should be sufficient, can be increased on beefy machines. In reality for most users running on small networks or on a single machine, it should be unnecessary to seek performance enhancement by increasing num-threads above 1.\n    num-threads: 1\n\n    # Ensure kernel buffer is large enough to not lose messages in traffic spikes\n    so-rcvbuf: 1m\n\n    # Ensure privacy of local IP ranges\n    private-address: 192.168.0.0/16\n    private-address: 169.254.0.0/16\n    private-address: 172.16.0.0/12\n    private-address: 10.0.0.0/8\n    private-address: fd00::/8\n    private-address: fe80::/10\n```\n\n3. Download root hints file:\n\n```bash\nwget -O /var/lib/unbound/root.hints https://www.internic.net/domain/named.cache\n```\n\n4. Set up a cron job to update root hints:\n\n```bash\n(crontab -l; echo \"0 4 1 * * wget -O /var/lib/unbound/root.hints https://www.internic.net/domain/named.cache\") | crontab -\n```\n\n5. Start and enable Unbound:\n\n```bash\nsystemctl start unbound\nsystemctl enable unbound\n```\n\n6. Configure Pi-hole to use Unbound:\n   - Go to Settings > DNS\n   - Set Custom DNS to `127.0.0.1#5335`\n   - Disable all other upstream DNS servers\n\n## Maintenance and Troubleshooting\n\n### Updating Pi-hole\n\n**Docker Method:**\n\n```bash\ncd ~/pihole\ndocker-compose pull\ndocker-compose down\ndocker-compose up -d\n```\n\n**Direct Installation Method:**\n\n```bash\npihole -up\n```\n\n### Common Issues\n\n1. **DNS Not Working**\n   - Check if Pi-hole container is running: `docker ps`\n   - Verify port 53 is not in use by another service: `sudo lsof -i :53`\n   - Check firewall rules: `sudo ufw status`\n\n2. **Web Interface Not Accessible**\n   - Verify container is running with web port exposed: `docker ps`\n   - Check the container logs: `docker logs pihole`\n\n3. **Slow Performance**\n   - Consider using faster upstream DNS servers\n   - Check system resources (Pi-hole requires minimal resources but can be affected by host performance)\n\n### Checking Status and Logs\n\n**Docker Method:**\n\n```bash\n# View container status\ndocker ps\n\n# View logs\ndocker logs pihole\n\n# View real-time logs\ndocker logs -f pihole\n```\n\n**Direct Installation Method:**\n\n```bash\n# Check service status\nsystemctl status pihole-FTL\n\n# View logs\ntail -f /var/log/pihole.log\n```\n\n## Additional Resources\n\n- **Official Pi-hole Documentation**: https://docs.pi-hole.net/\n- **Recommended Blocklists**: https://firebog.net/\n- **Pi-hole Forum**: https://discourse.pi-hole.net/\n- **GitHub Repository**: https://github.com/pi-hole/pi-hole\n\n## Conclusion\n\nPi-hole is a powerful tool for enhancing your network's security, privacy, and performance. By blocking ads and trackers at the DNS level, it provides a cleaner and faster internet experience for all devices on your network. The detailed statistics and management interface also give you valuable insights into your network traffic.",
    category: "Security",
    icon: "shield-alt",
    slug: "pihole-setup"
  }
];
